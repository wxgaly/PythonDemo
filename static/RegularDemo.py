"""
    
    date: 2018-02-28 17:23
"""

__author__ = "WXGALY"

# 正则表达式 我们强烈建议使用Python的r前缀，就不用考虑转义的问题了


import re

# s = r'ABC\-001'

# print(re.match(r'^\d{3}\-\d{3,8}$', '010-12345'))


# 分组
# print(re.split(r'\s+', 'a b   c'))

# m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
#
# print(m.group(2))  # group(0)永远是原始字符串

# t = '19:05:30'
#
# m = re.match(
#     r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:'
#     r'(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
#
# print(m.groups())


# 贪婪匹配
# 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
# 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：

# print(re.match(r'^(\d+)(0*)$', '102300').groups())
# print(re.match(r'^(\d+?)(0*)$', '102300').groups())

# 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')

print(re_telephone.match('010-12345').groups())

print(re_telephone.match('010-8086').groups())
